AWS is a cloud provider, it can be used for quite a lot of things from security to databases.


EC2 Service:
    It is known as Elastic Compute Cloud. They provide web services API for provision, managing and provisioning
    virtual servers inside amazon cloud.

    You can easily scale up or scale down many features



    Creating EC2 instance:
        - Select North Virginia Region
        - Go to services and select Ec2
        - Go to Ec2 dashboard
        - Go to instance and launch instance
        - Give it a name and tag #tags are used for filtering
        - Go to AMI(Amazon Machine Image) and select the appropriate Virtual Machine
        - A lot in browse more AMIs, especially the marketplace
        - Choose the one you want
        - Instance type is the requirement of the system
        - Create new key-pair for login, it will download the key as pem.
        - Go to network settings and rename the security group name and give it a description
        - You can provision the server at user data info under the advance details
        - The click on launch instance

    Connecting Instances:
        - Click on connect
        - Click on SSH client
        - go to where the pem file is on terminal
            chmod 400 name.pem
        - copy and connect using number 4 example

    Accessing Ports:
        To access port 80 or any other port, apart from the default 22

        - click on instance id and go to security
        - click on security groups id
        - Edit inbound rule and allow port 80 or any port you want
        - http://34.239.249.210/ # the ip is the public ipv4



Hosting a website using EC2:   # best practices
    - Gather the requirements needed:
        * os
        * size of RAM, CPU, Network and Storage
        * Type of Project
        * The type of application that will be running
        * Environment (development or production)


    - Key pairs:
        Create a key pair using the name of the project and download it.

    - Create Security Group:
        One security group can be use for multiple instances
        SSH Rule

    - Launch Instance:
        Create instance name with Resource types instance, volumes and network interfaces
        Pick the AMI you need
        Select the instance type
        Select the Key Pair login using the one you created for this
        click on instance id and go to security
        click on security groups id

    - Go to advance info:
        provision in user data

    - launch your instance

    -  Connecting Instances:
        - Click on connect
        - Click on SSH client
        - go to where the pem file is on terminal
            chmod 400 name.pem
        - copy and connect using number 4 example

     - Accessing Ports:
        To access port 80 or any other port, apart from the default 22


        - Edit inbound rule and allow port 80 or any port you want
        - http://34.239.249.210/ # the ip is the public ipv4


When you stop your instance, the public ip address will change when you start it again.
You can make it a static public ip, elastic ips are used.

Elast IP:
    Go to elastic IPs and click allocate
    Next associate it will the instance


####################################
# rest port ssh for security group if you are having issues logging in




hosting on ubuntu provisioning
#!/bin/bash
sudo apt update
sudo apt install apache2 wget unzip -y
wget https://templatemo.com/tm-zip-files-2020/templatemo_506_tinker.zip
unzip templatemo_506_tinker.zip
cp -r templatemo_506_tinker/* /var/www/html/
systemctl restart apache2
systemctl status apache2
####################################################





AWS CLI:
    This is using command line interface for aws.
    curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
    sudo installer -pkg AWSCLIV2.pkg -target /

    which aws # the shell path
    aws --version # the version

    AWS IAM USER:
        Log in to the AWS Management Console.
        Go to the IAM service dashboard by searching for "IAM" in the search bar.
        In the left-hand menu, click on "Users".
        Click on the "Add user" button.
        Enter a name for the user in the "User name" field.
        Select the "Programmatic access" option to generate an access key and secret key for this user.Click on "Next: Permissions".
        Attach an existing policy or create a new policy to grant permissions to the user. If you are not sure about the permissions required for the user, you can select the "Attach existing policies directly" option and choose a pre-defined policy.
        Click on "Next: Tags" and add any tags you want to associate with the user (optional).
        Click on "Next: Review".
        Review the details and click on "Create user".
        On the confirmation screen, you will see the Access key ID and Secret access key. Make sure to download and save the keys in a secure location as they will not be visible again.

    To login:
        aws configure

        AWS Access Key ID [****************BLSM]: KEY ID
        AWS Secret Access Key [****************Wt6W]: ACCESS KEY
        Default region name [us-east-1]: us-east-1
        Default output format [json]: json

    To see credentials:
        aws sts get-caller-identity

    To see instances:
        aws ec2 describe-instances

    You can use chat GPT to do anything on cli



EBS (Elastic Block Storage):

    This is a virtual hard disk for your ec2 instances which is called volumes.
    EBS also provide a service called snapshot which is the virtual backup of the volume.
    Make sure the instance and the EBS volume are in the same zone.

    Types of EBS Volume:
        - General Purpose(SSD) # most workload
        - Provisioned IOPS # large database
        - Throughput Optimized HD # Big Data and Data Warehouses
        - Cold HDD # file servers
        - Magnetic # backups and archives


    When an instance is created a volume is always attached, you can see this in the storage session of
    the instance.

    Suppose that you want to add extra volume, to the instance where we want to keep web images

    How to create a volume:
        - Go to Volumes
        - Click on create volume
        - Get a general purpose volume # The total must be less than 30G
        - Choose the same zone as the instance
        - Make sure you tag it # Name: Extra-Volume
        - Click on action in the volume session
        - Attach the Volume and Make sure you select the instance you created the volume for.
        - Now login to the instance on the command line and host a static website
        - cd /var/www/html # the aim is to put all the images in a storage

        -Partition in EBS Volumes:
            A disk partition is a logical section or division of a physical hard drive or EBS volume. Disk
            partitioning involves dividing the available storage space on a disk into one or more partitions,
            each of which can be formatted with a file system and used to store data.

            With EBS volumes in Amazon Web Services (AWS), you can create partitions when you create a new EBS
            volume or when you attach an existing EBS volume to an EC2 instance. By partitioning an EBS volume,
            you can organize your data and optimize disk usage.

            For example, you might create multiple partitions on an EBS volume to store different types of data,
            such as application data, log files, and backups. Or you might use partitions to separate your operating
            system files from your application data, which can help you manage updates and backups more effectively.

            It's worth noting that partitioning can also affect performance, as it can impact the way data is read
            and written to the disk. Therefore, it's important to consider your specific use case and workload requirements
            when deciding whether and how to partition your EBS volumes.

        - fdisk -l:
            This shows you the hard disk storage and the partition that is attached to it.

            Disk /dev/xvda has a partition of /dev/xvda1


        - df -h:
            This shows what part of the system is mounted on each partition.

            /dev/root       7.6G  2.0G  5.6G  27% /   # this means everything in root is mounted on that disk


        - Creating a partition:

            * fdisk /dev/xvdf  # this is the part of the attached volume and it is gotten from fdisk -l command

            * click m for help and read the manual

            * click n to add new partition

            * click p for primary partition

            * Give it partition number, 1 which is the default. You have 1-4

            * first sector, just hit enter

            * last sector, hit enter to create the entire disk partion there or +1G to +5G for the one of your choice

            * hit p to print the partition you just made

            * hit w to save the partition

            * fdisk -l # this will show the partition


        - Mounting on the Partition:

            * mkfs + tab*2 # hit tab twice

            * We are using the extension 4

            * mkfs.ext4 /dev/xvdf1  # the partition format with ext4

            * create directory /tmp/img-backups

            * mv img/* /tmp/img-backups

            Temporary Mount:
                mount /dev/xvdf1 /var/www/html/img

                umount /var/www/html/img # this will unmount the directory

            Permanent Mount:
                vim /etc/fstab

                Append:
                    /dev/xvdf1  /var/www/html/img ext4 defaults 0 0

                mount -a # to mount all in fstab file

                mv /tmp/img-backups /var/www/html/img # check it and selinux to disable

                systemctl restart apache2






EBS SnapShot:
            This is like taking the backup of the volume

            - First unmount the img file from the disk

                umount /var/www/html/img

            - If it is busy:
                lsof /var/www/html/img # to get the pid of the directory

                kill -9 pid

                umount /var/www/html/img

            - Go to the volume session and detach it from this instance
            - Delete the Volume you detached
            - Create a new volume for the database
            - Attach the new volume to instance
            - Partition the new disk with 3G
            - Format it with ext4
            - Then mount a new directory /var/lib/mysql
            - mount all in fstab
            - df -h to see if it is mounted

            Install mysql:
                sudo apt-get update
                sudo apt-get upgrade
                sudo apt-get install mysql-server mysql-client
                sudo systemctl start mysql
                sudo systemctl enable mysql
                sudo systemctl status mysql


            How to take snapshot:
                - When you lose your data, first thing to do is to unmount it.
                - Detach Volume
                - Create a new volume from snapshot
                - Attach the newly created volume
                - Mount it back

                - To take snapshot:
                    Go to volume and create snapshot
                    Check the status of in the snapshot

                -  rm -rf /var/lib/mysql/*  # remove all to create the scenario you lose data
                - stop the service
                - umount /var/lib/mysql/

                - detach the db volume in aws

                - Recovery:
                    go to snapshot and create volume
                    * you can even change zone if you want to or encrypt
                    Now attach it
                - run mount -a # to mount the new volume

                - ls /var/lib/mysql/ would recover all

            Clear all instance, snapshots and volumes

Elastic Load Balancer:

            A load balancer is a type of technology that helps distribute incoming network traffic across multiple servers,
            which are part of a cluster or group. It acts as an intermediary between the client (users, devices, applications)
            and the server, forwarding requests to the appropriate server based on a set of rules, such as round-robin,
            least connections, or IP hash.

            The primary purpose of a load balancer is to optimize resource utilization, increase availability,
            and improve the overall performance and scalability of a website or application. By distributing the workload
            evenly across multiple servers, a load balancer can prevent any single server from becoming overloaded,
            thereby reducing the risk of downtime or slow response times.

            Load balancers are often used in high-traffic websites, e-commerce platforms, and applications that
            require high availability, fault tolerance, and scalability. They can be hardware-based, software-based,
            or a combination of both, and are typically deployed in front of web servers, application servers,
            database servers, or any other type of server that receives incoming requests.


            - Create an instance using the provisioning script

            How to create an AMI from an instance:

                This is done so that you can launch instances from that ami with exactly the same data, incase you
                want to create multiple servers which will have exactly the same data.

                - Click on the instance and go to action
                - Go to Image and Templates, select create image.
                - Give a name to the ami and create the image
                - The ami will be in the AMI section
                    * Click on the AMI, you can even copy it to another region
                    * You can make the AMI public or share with others.

                Creating Templates:
                    If you launch an Instance from AMI, you will still need to fill in the information, like you are
                    creating a new instance. To avoid this problem, templates are used.

                    Templates are used to launch instances with information that are pre-stored

                    - Click on launch template
                    - Click on owned by me
                    - Fill in all the instances creation information
                    - Make sure you select owned by me, to use the ami you created
                    Note:
                        No need to provision, the provisioning will be done with the AMI you selected.
                    - Go to templates
                    - Click on the templates action and launch instance from it


            Load Balancer:

                This is the end point that user will access, before it route it to the appropriate server!

                - Go to target group which is basically group of instances
                - Create target groups
                - target type - instance
                - click on target group and edit the health, and click i to see what each does
                - click on target group and add to register the instances you want
                - Go to load balancer
                - click on create load balancer and select application load balancer
                - Name it and select the scheme as internet-facing
                - Select all zones
                - Next it till you the point of creating security group. Make it accessible from anywhere
                - Route it to the target group
                - Next till you create your load balancer
                - Wait till load balancer move from provisioning state to the active state
                - Make sure security group of each instance is from any ip for its inbound rule
                - You can also add sg of load to the sg of instance

Cloud Watch:
    The cloud watch section is a monitoring tool that allows you to monitor the activities that happens in your ec2
    instances. It is also possible to set triggers when it passes a certain metric. Triggers comes in as email notifications
git push origin main

    When you check monitoring, you will see some metrics it automatically monitor for you.

    To get more detailed monitoring
