When a code is being developed it cycle goes like this
                4. push

    1.code                  3. test locally


               2. build


Developers keep merging code to a VCS several times a day. All the code to collected from different developers would have
generated conflicts and bugs. Code merged from a long time when built would throw conflicts, bugs and error.

All these would need to be resolved, which takes a very long time and halts development.

Jenkins is one popular tool for continuous integration.



Installing Jenkins on Ubuntu:

    - Get an Ec2 instance
        Allow access for ssh at port 22

        allow access to port 8080 for jenkins

    Or USe VM which as worked way better than the ec2 as at now
    - provisioning


#!/bin/bash
sudo apt-get update
sudo apt install openjdk-11-jdk -y

curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins -y

systemctl enable jenkins

systemctl status jenkins

         # to see the commands you have executed

         curl http://169.254.169.254/latest/user-data # to see this provisioning script


    - login on online
        access port 8080

        cat /var/lib/jenkins/secrets/initialAdminPassword # this is the password


    Install git plugins

    - create a jenkins user and save this url http://3.83.179.22:8080/


Jobs in Jenkins:
    Job is just work load which jenkins will do for you, just like shell scripting in linux.

    Freestyle Jobs: They are all graphical jobs

    Pipeline As A Code: This is a script written in groovy



Configuring the tools Jenkins will use

    - Go dashboard > manage Jenkins > tools

    - JDK (Unclick Automatic)
        sudo apt install openjdk-8-jdk -y  # do this inside the instance

        NAME: OracleJDK8
        JAVA_HOME: /usr/lib/jvm/java-8-openjdk-arm64 # this worked


    - MAVEN
        NAME: MAVEN3
        Goals: install

        version: just pick the latest
   - Go to dashboard - manage Jenkins - system
   Environment variables
    Name: JAVA_HOME
    Value : java-8-openjdk-arm64

Create first freestyle job:

    - click on new item

    - name job as build

    - click on freestyle

    - give a description

    - source code management

        choose git

        repo: https://github.com/devopshydclub/vprofile-repo.git


        branch: */vp-rem

        build step: Invoke top-level Maven targets and select MAVEN3 and goal: install

        Save and build now

        click on the loading to see the output

        target will be inside the workspace # where the artifact is

        Post-build: **/*.war # It will archive it


        Tools in Jenkins:

            Tools are the packages needed for it to run the job.

            Like JDK and Maven that was installed in the tool


Plugins, Version and More:

    Plugins are the tools needed

    Versioning:
        To get different version of the artifact

        Create a job, name it versioning

        Make it inherit from Vprofile

        Remove the archiving the artifact

        Save and run the job

        You get the artifact, in the target direct

        Add one more build step; execute shell

            mkdir -p versions
            cp target/vprofile-v2.war versions/vprofile-V$BUILD_ID.war   # to create different version everytime you run it

        Now you see all the versions you need in versions

        It is possible for you to input the version you want

            Go to this project is parameterized and choose string
                Name it VERSION
                Go to execute shell
                mkdir -p versions
                cp target/vprofile-v2.war versions/vprofile-V$VERSION.war
        Now it will ask each time before you build

        It is not good to make you job interactive, because you want to automate it all the time.

    Plugins:
        This is the power house of jenkins, Go to plugins section to see them

            search and install Zentimestamp

            This will be used to track your artifacts

            Go to configure and click on the time stamp

                set it to the formate your want

                mkdir -p versions
                cp target/vprofile-v2.war versions/vprofile-V$BUILD_TIMESTAMP-$BUILD_ID.war





The Flow of CI pipeline:

    1. A developer will write the code test it locally and push it to github

    2. Jenkins will detect there is a code using git tools and plugins and fetch it

    3. It will use maven tool to build the code

    4. It will generate artifact that with be tested by maven

    5. You get code analysis from the report of the test using continuous inspection sonarqube

    6. It will be uploaded to sonarqube server, if it fails, it will break the pipeline, but if it passes we distribute it to the server and upload the version distributed to nexus server


Pipeline set up steps:   # the branch for the source code is  ci-jenkins
    1. Set up jenkins in Ec2 instance:

    2. Set up Nexus

    3. Set up Sonarqube

    4. Set security group

    5. Integrate Nexus and Sonarqube

    6. Write pipeline script

    7. Set notification if something goes wrong


Setting UP:
Pipeline set up steps:   # the branch for the source code is  ci-jenkins
    1. Set up jenkins in Ec2 instance:

        Use Ubuntu and t2 small

        Allow port 22 from my ip4 and anywhere

        Allow port 80 and 8080 from anywhere ip4



        Provision

#!/bin/bash
sudo apt-get update
sudo apt install openjdk-11-jdk -y
sudo apt install maven -y

curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins -y

    2. Set up Nexus
        Create nexus-sg allow ssh and allow port 8081 from anywhere

        Create key-pair nexus

        Launch an instance for nexus server using centos7 and use t2 medium

        Provision
#!/bin/bash
yum install java-1.8.0-openjdk.x86_64 wget -y
mkdir -p /opt/nexus/
mkdir -p /tmp/nexus/
cd /tmp/nexus/
NEXUSURL="https://download.sonatype.com/nexus/3/latest-unix.tar.gz"
wget $NEXUSURL -O nexus.tar.gz
EXTOUT=`tar xzvf nexus.tar.gz`
NEXUSDIR=`echo $EXTOUT | cut -d '/' -f1`
rm -rf /tmp/nexus/nexus.tar.gz
rsync -avzh /tmp/nexus/ /opt/nexus/
useradd nexus
chown -R nexus.nexus /opt/nexus
cat <<EOT>> /etc/systemd/system/nexus.service
[Unit]
Description=nexus service
After=network.target

[Service]
Type=forking
LimitNOFILE=65536
ExecStart=/opt/nexus/$NEXUSDIR/bin/nexus start
ExecStop=/opt/nexus/$NEXUSDIR/bin/nexus stop
User=nexus
Restart=on-abort

[Install]
WantedBy=multi-user.target
EOT
echo 'run_as_user="nexus"' > /opt/nexus/$NEXUSDIR/bin/nexus.rc
systemctl daemon-reload
systemctl start nexus
systemctl enable nexus

    3. Set up Sonarqube

        Create sonar key

        Create sonar sg allow port 22 and port 80 and 9000 from anywhere

        Launch instance using t2 medium and ubuntu 18


        Provision
 #!/bin/bash
cp /etc/sysctl.conf /root/sysctl.conf_backup
cat <<EOT> /etc/sysctl.conf
vm.max_map_count=262144
fs.file-max=65536
ulimit -n 65536
ulimit -u 4096
EOT
cp /etc/security/limits.conf /root/sec_limit.conf_backup
cat <<EOT> /etc/security/limits.conf
sonarqube   -   nofile   65536
sonarqube   -   nproc    409
EOT
sudo apt-get update -y
sudo apt-get install openjdk-11-jdk -y
sudo update-alternatives --config java
java -version
sudo apt update
wget -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O - | sudo apt-key add -
sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" >> /etc/apt/sources.list.d/pgdg.list'
sudo apt install postgresql postgresql-contrib -y
#sudo -u postgres psql -c "SELECT version();"
sudo systemctl enable postgresql.service
sudo systemctl start  postgresql.service
sudo echo "postgres:admin123" | chpasswd
runuser -l postgres -c "createuser sonar"
sudo -i -u postgres psql -c "ALTER USER sonar WITH ENCRYPTED PASSWORD 'admin123';"
sudo -i -u postgres psql -c "CREATE DATABASE sonarqube OWNER sonar;"
sudo -i -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE sonarqube to sonar;"
systemctl restart  postgresql
#systemctl status -l   postgresql
netstat -tulpena | grep postgres
sudo mkdir -p /sonarqube/
cd /sonarqube/
sudo curl -O https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.3.0.34182.zip
sudo apt-get install zip -y
sudo unzip -o sonarqube-8.3.0.34182.zip -d /opt/
sudo mv /opt/sonarqube-8.3.0.34182/ /opt/sonarqube
sudo groupadd sonar
sudo useradd -c "SonarQube - User" -d /opt/sonarqube/ -g sonar sonar
sudo chown sonar:sonar /opt/sonarqube/ -R
cp /opt/sonarqube/conf/sonar.properties /root/sonar.properties_backup
cat <<EOT> /opt/sonarqube/conf/sonar.properties
sonar.jdbc.username=sonar
sonar.jdbc.password=admin123
sonar.jdbc.url=jdbc:postgresql://localhost/sonarqube
sonar.web.host=0.0.0.0
sonar.web.port=9000
sonar.web.javaAdditionalOpts=-server
sonar.search.javaOpts=-Xmx512m -Xms512m -XX:+HeapDumpOnOutOfMemoryError
sonar.log.level=INFO
sonar.path.logs=logs
EOT
cat <<EOT> /etc/systemd/system/sonarqube.service
[Unit]
Description=SonarQube service
After=syslog.target network.target
[Service]
Type=forking
ExecStart=/opt/sonarqube/bin/linux-x86-64/sonar.sh start
ExecStop=/opt/sonarqube/bin/linux-x86-64/sonar.sh stop
User=sonar
Group=sonar
Restart=always
LimitNOFILE=65536
LimitNPROC=4096
[Install]
WantedBy=multi-user.target
EOT
systemctl daemon-reload
systemctl enable sonarqube.service
#systemctl start sonarqube.service
#systemctl status -l sonarqube.service
apt-get install nginx -y
rm -rf /etc/nginx/sites-enabled/default
rm -rf /etc/nginx/sites-available/default
cat <<EOT> /etc/nginx/sites-available/sonarqube
server{
    listen      80;
    server_name sonarqube.groophy.in;
    access_log  /var/log/nginx/sonar.access.log;
    error_log   /var/log/nginx/sonar.error.log;
    proxy_buffers 16 64k;
    proxy_buffer_size 128k;
    location / {
        proxy_pass  http://127.0.0.1:9000;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_redirect off;

        proxy_set_header    Host            \$host;
        proxy_set_header    X-Real-IP       \$remote_addr;
        proxy_set_header    X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto http;
    }
}
EOT
ln -s /etc/nginx/sites-available/sonarqube /etc/nginx/sites-enabled/sonarqube
systemctl enable nginx.service
#systemctl restart nginx.service
sudo ufw allow 80,9000,9001/tcp
echo "System reboot in 30 sec"
sleep 30
reboot

    4. Test each server whether you can access them or not

        Jenkins:
            systemctl status jenkins

            jenkins at port 8080 on browser

        sonar:
            systemctl status sonarqube

            sonar at port 9000 or 80 on browser

        nexus:
            systemctl status nexus

            nexus at port 8081 on browser


    5. Access Jenkins Server as admin

        - install all suggested plugins

    6. Login to nexus on browser
        cat /opt/nexus/sonatype-work/nexus3/admin.password  #for password

    7. Sonarqube server as admin

        admin as default password


    8. Install Some plugins

        Nexus Artifact Uploader

        Sonarqube Scanner

        Build Timestamp

        Pipeline Maven Integration

        Pipeline Utility Steps




