When a code is being developed it cycle goes like this
                4. push

    1.code                  3. test locally


               2. build


Developers keep merging code to a VCS several times a day. All the code to collected from different developers would have
generated conflicts and bugs. Code merged from a long time when built would throw conflicts, bugs and error.

All these would need to be resolved, which takes a very long time and halts development.

Jenkins is one popular tool for continuous integration.



Installing Jenkins on Ubuntu:

    - Get an Ec2 instance
        Allow access for ssh at port 22

        allow access to port 8080 for jenkins

    Or USe VM which as worked way better than the ec2 as at now
    - provisioning


#!/bin/bash
sudo apt-get update
sudo apt install openjdk-11-jdk -y

curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins -y

systemctl enable jenkins

systemctl status jenkins

         # to see the commands you have executed

         curl http://169.254.169.254/latest/user-data # to see this provisioning script


    - login on online
        access port 8080

        cat /var/lib/jenkins/secrets/initialAdminPassword # this is the password


    Install git plugins

    - create a jenkins user and save this url http://3.83.179.22:8080/


Jobs in Jenkins:
    Job is just work load which jenkins will do for you, just like shell scripting in linux.

    Freestyle Jobs: They are all graphical jobs

    Pipeline As A Code: This is a script written in groovy



Configuring the tools Jenkins will use

    - Go dashboard > manage Jenkins > tools

    - JDK (Unclick Automatic)
        sudo apt install openjdk-8-jdk -y  # do this inside the instance

        NAME: OracleJDK8
        JAVA_HOME: /usr/lib/jvm/java-8-openjdk-arm64 # this worked


    - MAVEN
        NAME: MAVEN3
        Goals: install

        version: just pick the latest
   - Go to dashboard - manage Jenkins - system
   Environment variables
    Name: JAVA_HOME
    Value :ls java-1.8.0-openjdk-amd64

Create first freestyle job:

    - click on new item

    - name job as build

    - click on freestyle

    - give a description

    - source code management

        choose git

        repo: https://github.com/devopshydclub/vprofile-repo.git


        branch: */vp-rem

        build step: Invoke top-level Maven targets and select MAVEN3 and goal: install

        Save and build now

        click on the loading to see the output

        target will be inside the workspace # where the artifact is

        Post-build: **/*.war # It will archive it


        Tools in Jenkins:

            Tools are the packages needed for it to run the job.

            Like JDK and Maven that was installed in the tool


Plugins, Version and More:

    Plugins are the tools needed

    Versioning:
        To get different version of the artifact

        Create a job, name it versioning

        Make it inherit from Vprofile

        Remove the archiving the artifact

        Save and run the job

        You get the artifact, in the target direct

        Add one more build step; execute shell

            mkdir -p versions
            cp target/vprofile-v2.war versions/vprofile-V$BUILD_ID.war   # to create different version everytime you run it

        Now you see all the versions you need in versions

        It is possible for you to input the version you want

            Go to this project is parameterized and choose string
                Name it VERSION
                Go to execute shell
                mkdir -p versions
                cp target/vprofile-v2.war versions/vprofile-V$VERSION.war
        Now it will ask each time before you build

        It is not good to make you job interactive, because you want to automate it all the time.

    Plugins:
        This is the power house of jenkins, Go to plugins section to see them

            search and install Zentimestamp

            This will be used to track your artifacts

            Go to configure and click on the time stamp

                set it to the formate your want

                mkdir -p versions
                cp target/vprofile-v2.war versions/vprofile-V$BUILD_TIMESTAMP-$BUILD_ID.war





The Flow of CI pipeline:

    1. A developer will write the code test it locally and push it to github

    2. Jenkins will detect there is a code using git tools and plugins and fetch it

    3. It will use maven tool to build the code

    4. It will generate artifact that with be tested by maven

    5. You get code analysis from the report of the test using continuous inspection sonarqube

    6. It will be uploaded to sonarqube server, if it fails, it will break the pipeline, but if it passes we distribute it to the server and upload the version distributed to nexus server


